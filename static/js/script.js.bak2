document.addEventListener('DOMContentLoaded', function() {
    // UI elements
    const startRecordingBtn = document.getElementById('startRecording');
    const stopRecordingBtn = document.getElementById('stopRecording');
    const clearTranscriptBtn = document.getElementById('clearTranscript');
    const transcriptElement = document.getElementById('transcript');
    const generateNotesBtn = document.getElementById('generateNotes');
    const downloadPDFBtn = document.getElementById('downloadPDF');
    const structuredNotesElement = document.getElementById('structured-notes');
    const notesLoadingElement = document.getElementById('notes-loading');
    const recordingStatus = document.getElementById('status-text');
    const recordingIndicator = document.getElementById('recording-indicator');
    const transcribeYoutubeBtn = document.getElementById('transcribe-youtube');
    const youtubeUrlInput = document.getElementById('youtube-url');
    const useManualTranscriptBtn = document.getElementById('use-manual-transcript');
    const manualTranscriptInput = document.getElementById('manual-transcript');
    
    // File upload functionality
    const audioFileInput = document.getElementById('audio-file');
    const transcribeAudioFileBtn = document.getElementById('transcribe-audio-file');
    const uploadProgress = document.getElementById('upload-progress');
    const audioUploadForm = document.getElementById('audio-upload-form');
    
    // Global variables
    let recognition = null;
    let finalTranscript = '';
    let interimTranscript = '';
    let isRecording = false;
    
    // Check browser support for Speech Recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    // Show error modal
    function showError(message) {
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        document.getElementById('error-message').textContent = message;
        errorModal.show();
    }
    
    // Initialize speech recognition if supported
    function initializeSpeechRecognition() {
        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'en-US';
            
            recognition.onstart = function() {
                isRecording = true;
                recordingStatus.textContent = 'Recording...';
                recordingIndicator.textContent = 'ðŸ”´';
                startRecordingBtn.disabled = true;
                stopRecordingBtn.disabled = false;
                if (generateNotesBtn) generateNotesBtn.disabled = true;
                if (downloadPDFBtn) downloadPDFBtn.disabled = true;
            };
            
            recognition.onresult = function(event) {
                interimTranscript = '';
                
                // Collect the results
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript + ' ';
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
                
                // Update transcript display
                updateTranscriptDisplay();
            };
            
            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                
                let errorMessage = 'Speech recognition error';
                
                switch(event.error) {
                    case 'not-allowed':
                        errorMessage = 'Microphone access was denied. Please allow microphone access to use this feature.';
                        break;
                    case 'no-speech':
                        errorMessage = 'No speech was detected. Please try again.';
                        break;
                    case 'network':
                        errorMessage = 'Network error occurred. Please check your internet connection.';
                        break;
                    default:
                        errorMessage = `Speech recognition error: ${event.error}`;
                }
                
                showError(errorMessage);
                stopRecording();
            };
            
            recognition.onend = function() {
                if (isRecording) {
                    // If we're still supposed to be recording, restart it
                    // (this handles the automatic stop after ~60 seconds)
                    recognition.start();
                }
            };
            
            return true;
        } else {
            if (startRecordingBtn) startRecordingBtn.disabled = true;
            if (stopRecordingBtn) stopRecordingBtn.disabled = true;
            return false;
        }
    }
    
    // Initialize speech recognition
    const speechRecognitionSupported = initializeSpeechRecognition();
    
    // If speech recognition isn't supported, show a warning
    if (!speechRecognitionSupported && document.getElementById('recording-tab')) {
        document.getElementById('recording-tab').classList.add('disabled');
        document.getElementById('recording-tab').setAttribute('data-bs-toggle', '');
        
        // Add warning to the recording content tab
        const recordingContent = document.getElementById('recording-content');
        if (recordingContent) {
            const warningDiv = document.createElement('div');
            warningDiv.className = 'alert alert-warning';
            warningDiv.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>Speech recognition is not supported in this browser. Please try using Chrome or Edge.';
            recordingContent.prepend(warningDiv);
        }
    }
    
    // Update transcript display with current transcription
    function updateTranscriptDisplay() {
        if (transcriptElement) {
            transcriptElement.innerHTML = finalTranscript + 
                '<span class="text-muted">' + interimTranscript + '</span>';
            
            // If we have a final transcript, enable the generate notes button
            if (finalTranscript.trim() !== '') {
                if (generateNotesBtn) generateNotesBtn.disabled = false;
            }
            
            // Save current transcript to the server periodically if it changes
            if (finalTranscript.trim() !== '') {
                saveTranscriptToServer(finalTranscript);
            }
        }
    }
    
    // Function to save transcript to server
    function saveTranscriptToServer(transcript) {
        fetch('/save-transcript', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ transcript: transcript })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to save transcript');
            }
            return response.json();
        })
        .then(data => {
            console.log('Transcript saved successfully');
        })
        .catch(error => {
            console.error('Error saving transcript:', error);
        });
    }
    
    // Start recording
    function startRecording() {
        if (recognition) {
            // Clear previous transcript if any
            if (transcriptElement && transcriptElement.textContent.trim() === 'Your transcript will appear here...') {
                finalTranscript = '';
                interimTranscript = '';
                transcriptElement.textContent = '';
            }
            
            try {
                recognition.start();
            } catch (error) {
                console.error('Error starting recognition:', error);
                showError('Error starting speech recognition. Please try again.');
            }
        } else {
            showError('Speech recognition is not supported in your browser. Please try Chrome or Edge.');
        }
    }
    
    // Stop recording
    function stopRecording() {
        if (recognition) {
            isRecording = false;
            recognition.stop();
            recordingStatus.textContent = 'Ready';
            recordingIndicator.textContent = 'âšª';
            startRecordingBtn.disabled = false;
            stopRecordingBtn.disabled = true;
            
            // Enable generate notes button if we have a transcript
            if (finalTranscript.trim() !== '') {
                if (generateNotesBtn) generateNotesBtn.disabled = false;
            }
        }
    }
    
    // Function to clear transcript
    function clearTranscript() {
        finalTranscript = '';
        interimTranscript = '';
        if (transcriptElement) transcriptElement.textContent = 'Your transcript will appear here...';
        if (generateNotesBtn) generateNotesBtn.disabled = true;
        if (downloadPDFBtn) downloadPDFBtn.disabled = true;
        if (structuredNotesElement) structuredNotesElement.textContent = 'Generated notes will appear here...';
        
        // Save empty transcript to server to clear it
        saveTranscriptToServer('');
    }
    
    // Fetch YouTube transcript
    function getYoutubeTranscript() {
        const youtubeUrl = youtubeUrlInput.value.trim();
        
        if (!youtubeUrl) {
            showError('Please enter a YouTube URL.');
            return;
        }
        
        if (!youtubeUrl.match(/^https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)/)) {
            showError('Please enter a valid YouTube URL (must be youtube.com or youtu.be link).');
            return;
        }
        
        // Disable button and show loading
        transcribeYoutubeBtn.disabled = true;
        transcribeYoutubeBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';
        
        fetch('/transcribe-youtube', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ youtube_url: youtubeUrl })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.error || 'Failed to get transcript from YouTube video');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.transcript) {
                finalTranscript = data.transcript;
                
                // Update transcript display
                if (transcriptElement) {
                    transcriptElement.textContent = finalTranscript;
                }
                
                // Enable generate notes button
                if (generateNotesBtn) {
                    generateNotesBtn.disabled = false;
                }
                
                // Reset YouTube URL input
                youtubeUrlInput.value = '';
            }
        })
        .catch(error => {
            console.error('Error getting YouTube transcript:', error);
            showError(error.message || 'Failed to get transcript from YouTube video. Please try a different video or method.');
        })
        .finally(() => {
            // Re-enable button and restore text
            transcribeYoutubeBtn.disabled = false;
            transcribeYoutubeBtn.innerHTML = '<i class="fas fa-download me-1"></i> Get YouTube Transcript';
        });
    }
    
    // Use manual transcript
    function useManualTranscript() {
        const manualText = manualTranscriptInput.value.trim();
        
        if (!manualText) {
            showError('Please enter or paste a transcript in the text area.');
            return;
        }
        
        finalTranscript = manualText;
        
        // Update transcript display
        if (transcriptElement) {
            transcriptElement.textContent = finalTranscript;
        }
        
        // Enable generate notes button
        if (generateNotesBtn) {
            generateNotesBtn.disabled = false;
        }
        
        // Save transcript to server
        saveTranscriptToServer(finalTranscript);
        
        // Reset manual text input
        manualTranscriptInput.value = '';
    }
    
    // Generate structured notes
    function generateNotes() {
        if (!finalTranscript.trim()) {
            showError('No transcript available. Please record or enter some text first.');
            return;
        }
        
        // Show loading indicator
        if (notesLoadingElement) {
            notesLoadingElement.classList.remove('d-none');
        }
        if (structuredNotesElement) {
            structuredNotesElement.textContent = 'Generating...';
        }
        
        // Disable generate button
        if (generateNotesBtn) {
            generateNotesBtn.disabled = true;
            generateNotesBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';
        }
        
        fetch('/generate-notes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ transcript: finalTranscript })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(data => {
                    throw new Error(data.error || 'Failed to generate notes');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.notes) {
                if (structuredNotesElement) {
                    // Render markdown
                    structuredNotesElement.innerHTML = renderMarkdown(data.notes);
                }
                
                // Enable download button
                if (downloadPDFBtn) {
                    downloadPDFBtn.disabled = false;
                }
            }
        })
        .catch(error => {
            console.error('Error generating notes:', error);
            showError(error.message || 'Failed to generate structured notes. Please try again.');
            
            if (structuredNotesElement) {
                structuredNotesElement.textContent = 'Error generating notes. Please try again.';
            }
        })
        .finally(() => {
            // Hide loading indicator
            if (notesLoadingElement) {
                notesLoadingElement.classList.add('d-none');
            }
            
            // Reset generate button
            if (generateNotesBtn) {
                generateNotesBtn.disabled = false;
                generateNotesBtn.innerHTML = '<i class="fas fa-magic me-1"></i> Generate Notes';
            }
        });
    }
    
    // Simple markdown renderer for the UI
    function renderMarkdown(markdownText) {
        if (!markdownText) return '';
        
        // Handle headers
        let html = markdownText
            .replace(/^# (.*?)$/gm, '<h1>$1</h1>')
            .replace(/^## (.*?)$/gm, '<h2>$1</h2>')
            .replace(/^### (.*?)$/gm, '<h3>$1</h3>')
            .replace(/^#### (.*?)$/gm, '<h4>$1</h4>')
            .replace(/^##### (.*?)$/gm, '<h5>$1</h5>')
            .replace(/^###### (.*?)$/gm, '<h6>$1</h6>');
        
        // Handle bold and italic
        html = html
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/~~(.*?)~~/g, '<del>$1</del>');
        
        // Handle lists
        html = html
            .replace(/^- (.*?)$/gm, '<li>$1</li>')
            .replace(/^(\d+)\. (.*?)$/gm, '<li>$2</li>');
        
        // Wrap lists in ul or ol tags
        html = html
            .replace(/(<li>.*?<\/li>)\n<li>/gs, '$1<li>')
            .replace(/<li>.*?<\/li>/gs, function(match) {
                return '<ul>' + match + '</ul>';
            });
        
        // Handle code blocks
        html = html
            .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code>$1</code>');
        
        // Handle blockquotes
        html = html.replace(/^> (.*?)$/gm, '<blockquote>$1</blockquote>');
        
        // Handle horizontal rules
        html = html.replace(/^---$/gm, '<hr>');
        
        // Handle paragraphs (double newlines)
        html = html.replace(/\n\n([^<].*?)\n\n/gs, '</p><p>$1</p><p>');
        
        // Convert line breaks to <br>
        html = html.replace(/\n([^<])/g, '<br>$1');
        
        // Wrap in paragraph if not already
        if (!html.startsWith('<')) {
            html = '<p>' + html + '</p>';
        }
        
        return html;
    }
    
    // Download PDF of structured notes
    function downloadPDF() {
        if (!structuredNotesElement || structuredNotesElement.textContent === 'Generated notes will appear here...') {
            showError('No structured notes to download. Please generate notes first.');
            return;
        }
        
        // Show loading state
        if (downloadPDFBtn) {
            downloadPDFBtn.disabled = true;
            downloadPDFBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Generating PDF...';
        }
        
        // Fetch the PDF using AJAX
        fetch('/download-pdf', {
            method: 'POST'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to generate PDF');
            }
            return response.blob();
        })
        .then(blob => {
            // Create a download link for the blob
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'structured_notes.pdf';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            a.remove();
        })
        .catch(error => {
            console.error('Error downloading PDF:', error);
            showError('Failed to download PDF. Please try again.');
        })
        .finally(() => {
            // Reset button state
            if (downloadPDFBtn) {
                downloadPDFBtn.disabled = false;
                downloadPDFBtn.innerHTML = '<i class="fas fa-file-pdf me-1"></i> Download PDF';
            }
        });
    }
    
    // Add event listeners
    if (startRecordingBtn) startRecordingBtn.addEventListener('click', startRecording);
    if (stopRecordingBtn) stopRecordingBtn.addEventListener('click', stopRecording);
    if (clearTranscriptBtn) clearTranscriptBtn.addEventListener('click', clearTranscript);
    if (generateNotesBtn) generateNotesBtn.addEventListener('click', generateNotes);
    if (downloadPDFBtn) downloadPDFBtn.addEventListener('click', downloadPDF);
    if (transcribeYoutubeBtn) transcribeYoutubeBtn.addEventListener('click', getYoutubeTranscript);
    if (useManualTranscriptBtn) useManualTranscriptBtn.addEventListener('click', useManualTranscript);
    
    // File upload handler
    if (transcribeAudioFileBtn && audioFileInput) {
        transcribeAudioFileBtn.addEventListener('click', function() {
            // Check if a file is selected
            if (!audioFileInput.files.length) {
                showError('Please select an audio file first.');
                return;
            }
            
            const file = audioFileInput.files[0];
            console.log("Selected file:", file.name, "Size:", file.size, "Type:", file.type);
            
            // Validate file type
            const allowedAudioTypes = ['.mp3', '.wav', '.m4a', '.ogg', '.flac'];
            const allowedVideoTypes = ['.mp4', '.mov', '.avi', '.mkv', '.webm'];
            const allowedTypes = [...allowedAudioTypes, ...allowedVideoTypes];
            const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
            console.log("File extension:", fileExtension);
            
            if (!allowedTypes.includes(fileExtension)) {
                showError(`Invalid file type. Allowed types: ${allowedTypes.join(', ')}`);
                return;
            }
            
            // Check file size - limit to 100MB
            const maxSizeMB = 100;
            const maxSizeBytes = maxSizeMB * 1024 * 1024;
            
            if (file.size > maxSizeBytes) {
                showError(`File is too large. Maximum size is ${maxSizeMB}MB. For large videos, consider using the YouTube transcription option instead.`);
                return;
            }
            
            // Determine if file is a video
            const isVideoFile = allowedVideoTypes.includes(fileExtension);
            
            // Add warning for video files over 25MB
            if (isVideoFile && file.size > 25 * 1024 * 1024) {
                console.log("Large video file detected, showing warning");
                // Show warning but allow to continue
                // Function to create warning modal if it doesn't exist in the DOM
                function createWarningModal() {
                    const modalDiv = document.createElement('div');
                    modalDiv.innerHTML = `
                    <div class="modal fade" id="warningModal" tabindex="-1" aria-labelledby="warningModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header bg-warning">
                                    <h5 class="modal-title" id="warningModalLabel">Large File Warning</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div id="warning-message"></div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" id="warning-continue" class="btn btn-primary">Continue</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                    document.body.appendChild(modalDiv.firstElementChild);
                    return document.getElementById('warningModal');
                }
                
                // Function to create warning modal if it doesn't exist in the DOM
                function createWarningModal() {
                    const modalDiv = document.createElement('div');
                    modalDiv.innerHTML = `
                    <div class="modal fade" id="warningModal" tabindex="-1" aria-labelledby="warningModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header bg-warning">
                                    <h5 class="modal-title" id="warningModalLabel">Large File Warning</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div id="warning-message"></div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" id="warning-continue" class="btn btn-primary">Continue</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                    document.body.appendChild(modalDiv.firstElementChild);
                    return document.getElementById('warningModal');
                }
                
                const warningModal = new bootstrap.Modal(document.getElementById('warningModal') || createWarningModal());
                const warningModal = new bootstrap.Modal(document.getElementById('warningModal') || createWarningModal());
                document.getElementById('warning-message').innerHTML = 
                    `<p>The video file you selected is large (${(file.size / (1024 * 1024)).toFixed(1)}MB).</p>
                     <p>Only the first 10 minutes will be processed for transcription.</p>
                     <p>For complete transcription of longer videos, please use the YouTube option instead.</p>`;
                warningModal.show();
                
                // Continue with upload after warning is shown
                document.getElementById('warning-continue').onclick = function() {
                    warningModal.hide();
                    // Continue with processing
                    processFile();
                };
                return;
            }
            
            // If all checks pass, continue immediately
            processFile();
            
            // Function to process the file
            function processFile() {
                // Show loading state
            transcribeAudioFileBtn.disabled = true;
            transcribeAudioFileBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';
            
            // Show progress if element exists
            if (uploadProgress) {
                uploadProgress.classList.remove('d-none');
                const progressBar = uploadProgress.querySelector('.progress-bar');
                if (progressBar) {
                    progressBar.style.width = '0%';
                }
            }
            
            // Create form data
            const formData = new FormData();
            formData.append('audio_file', file);
            
            // Debug: Log form data (can't see the actual file content but we can see if it's attached)
            console.log("FormData created with file:", file.name);
            
            // Send to server
            const xhr = new XMLHttpRequest();
            
            // Track upload progress
            xhr.upload.addEventListener('progress', function(e) {
                if (e.lengthComputable && uploadProgress) {
                    const percentComplete = Math.round((e.loaded / e.total) * 100);
                    console.log(`Upload progress: ${percentComplete}%`);
                    const progressBar = uploadProgress.querySelector('.progress-bar');
                    if (progressBar) {
                        progressBar.style.width = percentComplete + '%';
                        progressBar.textContent = percentComplete + '%';
                    }
                }
            });
            
            xhr.addEventListener('load', function() {
                console.log("XHR load event, status:", xhr.status);
                if (xhr.status === 200) {
                    // Parse the response
                    const response = JSON.parse(xhr.responseText);
                    console.log("Response:", response);
                    
                    // Set the transcript
                    if (response.transcript) {
                        console.log("Setting transcript:", response.transcript);
                        // No need to store in client-side session, the server already has it
                        finalTranscript = response.transcript;
                        if (transcriptElement) {
                            transcriptElement.textContent = finalTranscript;
                            
                            // Make sure the tab with the transcript is active
                            const transcriptTab = document.querySelector('button[data-bs-target="#transcript-tab"]');
                            if (transcriptTab) {
                                const tab = new bootstrap.Tab(transcriptTab);
                                tab.show();
                            }
                            
                            // Scroll to the transcript
                            document.getElementById('transcript-container').scrollIntoView({ behavior: 'smooth' });
                        }
                        
                        // Store in session
                        saveTranscriptToServer(finalTranscript);
                        
                        // Enable generate notes button
                        if (generateNotesBtn) {
                            generateNotesBtn.disabled = false;
                        }
                        
                        // Reset form
                        audioFileInput.value = '';
                    }
                } else {
                    // Handle error
                    console.error("Error response:", xhr.status, xhr.responseText);
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (xhr.status === 503) {
                            // Special handling for service unavailable
                            const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                            const errorElement = document.getElementById('error-message');
                            errorElement.innerHTML = `
                                <div class="alert alert-warning">
                                    <h5><i class="fas fa-exclamation-triangle me-2"></i>Service Limitation</h5>
                                    <p>${response.error || 'Online speech recognition is currently unavailable.'}</p>
                                    <hr>
                                    <p class="mb-0">Suggestions:</p>
                                    <ul>
                                        <li>Try the YouTube transcription tab instead</li>
                                        <li>Use the manual text input if you have a transcript</li>
                                    </ul>
                                </div>
                            `;
                            errorModal.show();
                        } else {
                            showError(`Error: ${response.error || 'Failed to transcribe audio file'}`);
                        }
                    } catch (e) {
                        showError('Error: Failed to transcribe audio file. Server returned an invalid response.');
                    }
                }
                
                // Reset UI state
                if (uploadProgress) {
                    uploadProgress.classList.add('d-none');
                }
                transcribeAudioFileBtn.disabled = false;
                transcribeAudioFileBtn.innerHTML = '<i class="fas fa-upload me-1"></i> Upload & Transcribe';
            });
            
            xhr.addEventListener('error', function(e) {
                console.error("XHR error event:", e);
                showError('Error: Network error while uploading file. Please try again.');
                
                // Reset UI state
                if (uploadProgress) {
                    uploadProgress.classList.add('d-none');
                }
                transcribeAudioFileBtn.disabled = false;
                transcribeAudioFileBtn.innerHTML = '<i class="fas fa-upload me-1"></i> Upload & Transcribe';
            });
            
            // Open and send the request
            console.log("Opening XHR request to /transcribe-audio-file");
            xhr.open('POST', '/transcribe-audio-file', true);
            xhr.send(formData);
            console.log("XHR request sent with form data");
        });
    }
});
